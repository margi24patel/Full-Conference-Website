{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/margipatel/Documents/react/margi-example/03-More-React-Hooks-useContext-useReducer-useCallback-useMemo/clip04-Updating-Example-To-Full-Conf-Site/src/ImageToggleOnScroll.js\";\n\nimport React, { useRef, useEffect, useState } from \"react\";\n\nvar ImageTogglerOnScroll = function ImageTogglerOnScroll(_ref) {\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n  var imageRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      inView = _useState2[0],\n      setInView = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var isInView = function isInView() {\n    if (imageRef.current) {\n      var rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    setLoading(false);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [isLoading]);\n  return isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, \"Loading...\") : /*#__PURE__*/React.createElement(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: imageRef,\n    width: \"200\",\n    height: \"200\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default ImageTogglerOnScroll;","map":{"version":3,"sources":["/Users/margipatel/Documents/react/margi-example/03-More-React-Hooks-useContext-useReducer-useCallback-useMemo/clip04-Updating-Example-To-Full-Conf-Site/src/ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageTogglerOnScroll","primaryImg","secondaryImg","imageRef","inView","setInView","isLoading","setLoading","isInView","current","rect","getBoundingClientRect","top","bottom","window","innerHeight","scrollHandler","addEventListener","removeEventListener"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAkC;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAC7D,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAD,CAAvB;;AAD6D,kBAEjCE,QAAQ,CAAC,KAAD,CAFyB;AAAA;AAAA,MAEtDK,MAFsD;AAAA,MAE9CC,SAF8C;;AAAA,mBAG7BN,QAAQ,CAAC,IAAD,CAHqB;AAAA;AAAA,MAGtDO,SAHsD;AAAA,MAG3CC,UAH2C;;AAK7D,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAIL,QAAQ,CAACM,OAAb,EAAsB;AACpB,UAAMC,IAAI,GAAGP,QAAQ,CAACM,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeC,MAAM,CAACC,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BX,IAAAA,SAAS,CAAC,YAAM;AACd,aAAOG,QAAQ,EAAf;AACD,KAFQ,CAAT;AAGD,GAJD;;AAMAV,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,aAAlC;AACAX,IAAAA,SAAS,CAACG,QAAQ,EAAT,CAAT;AACAD,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA,WAAO,YAAM;AACXO,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,aAArC;AACD,KAFD;AAGD,GAPQ,EAON,CAACV,SAAD,CAPM,CAAT;AASA,SAAOA,SAAS,gBACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADc,gBAGd;AACE,IAAA,GAAG,EAAEF,MAAM,GAAGF,YAAH,GAAkBD,UAD/B;AAEE,IAAA,GAAG,EAAC,EAFN;AAGE,IAAA,GAAG,EAAEE,QAHP;AAIE,IAAA,KAAK,EAAC,KAJR;AAKE,IAAA,MAAM,EAAC,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAWD,CAvCD;;AAyCA,eAAeH,oBAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nconst ImageTogglerOnScroll = ({ primaryImg, secondaryImg }) => {\n  const imageRef = useRef(null);\n  const [inView, setInView] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    setLoading(false);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [isLoading]);\n\n  return isLoading ? (\n    <div>Loading...</div>\n  ) : (\n    <img\n      src={inView ? secondaryImg : primaryImg}\n      alt=\"\"\n      ref={imageRef}\n      width=\"200\"\n      height=\"200\"\n    />\n  );\n};\n\nexport default ImageTogglerOnScroll;\n"]},"metadata":{},"sourceType":"module"}